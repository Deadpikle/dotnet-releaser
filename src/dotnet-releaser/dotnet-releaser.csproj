<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net6.0</TargetFramework>
    <RootNamespace>DotNetReleaser</RootNamespace>
    <AssemblyName>dotnet-releaser</AssemblyName>
    <Nullable>enable</Nullable>
    <IsPackable>true</IsPackable>
    <PackAsTool>true</PackAsTool>
    <Description>dotnet-releaser is a command line tool to easily cross-compile, package and publish your .NET application to NuGet and GitHub.</Description>
    <!-- This is to allow to compile dotnet-releaser on itself in the CI otherwise it cannot overwrite its self executable -->
    <BaseOutputPath Condition="'$(DotNetReleaserBinCi)' == 'true'">bin-ci</BaseOutputPath>
  </PropertyGroup>

  <!-- Package properties -->
  <PropertyGroup>
    <VersionPrefix>0.1.1</VersionPrefix>
    <Copyright>Alexandre Mutel</Copyright>
    <NeutralLanguage>en-US</NeutralLanguage>
    <Authors>Alexandre Mutel</Authors>
    <PackageTags>releaser;packaging;deb;rpm;tool</PackageTags>
    <PackageReadmeFile>readme.md</PackageReadmeFile>
    <PackageReleaseNotes>https://github.com/xoofx/$(AssemblyName)/blob/master/changelog.md</PackageReleaseNotes>
    <PackageIcon>$(AssemblyName).png</PackageIcon>
    <PackageProjectUrl>https://github.com/xoofx/$(AssemblyName)</PackageProjectUrl>
    <PackageLicenseExpression>BSD-2-Clause</PackageLicenseExpression>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
  </PropertyGroup>

  <ItemGroup>
    <None Include="$(MSBuildThisFileDirectory)../../img/$(AssemblyName).png" Pack="true" PackagePath="/" />
    <None Include="$(MSBuildThisFileDirectory)../../readme.md" Pack="true" PackagePath="/" />
  </ItemGroup>

  <ItemGroup>
    <None Remove="dotnet-releaser.targets" />
    <Content Include="dotnet-releaser.targets">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
    </Content>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="McMaster.Extensions.CommandLineUtils" Version="4.0.0" />
    <PackageReference Include="Microsoft.Extensions.Logging" Version="6.0.0" />
    <PackageReference Include="Microsoft.Extensions.Logging.Console" Version="6.0.0" />
    <PackageReference Include="MSBuild.StructuredLogger" Version="2.1.617" GeneratePathProperty="true" />
    <PackageReference Include="Octokit" Version="0.50.0" />
    <PackageReference Include="Tomlyn" Version="0.10.0" />
    <PackageReference Include="CliWrap" Version="3.4.1" />
  </ItemGroup>

  <!-- Workaround to allow to publish StruturedLogger.dll as dotnet-releaser-binary-logger.dll and make sure single file/self contained will not removed it -->
  <PropertyGroup>
    <!-- Avoid NuGet to complain about dotnet-releaser-binary-logger.dll-->
    <NoWarn>NU5100</NoWarn>
    <DotNetReleaserStructuredLoggerFile>dotnet-releaser-binary-logger.dll</DotNetReleaserStructuredLoggerFile>
    <IntermediateDotNetReleaserStructuredLoggerFile>obj/$(DotNetReleaserStructuredLoggerFile)</IntermediateDotNetReleaserStructuredLoggerFile>
  </PropertyGroup>

  <Target Name="AddContentStructuredLogger" AfterTargets="CollectPackageReferences" Condition="'$(PkgMSBuild_StructuredLogger)' != ''" Inputs="$(PkgMSBuild_StructuredLogger)\lib\netstandard2.0\StructuredLogger.dll" Outputs="$(IntermediateDotNetReleaserStructuredLoggerFile)">
    <Copy DestinationFiles="$(IntermediateDotNetReleaserStructuredLoggerFile)" SourceFiles="$(PkgMSBuild_StructuredLogger)\lib\netstandard2.0\StructuredLogger.dll" SkipUnchangedFiles="true" />
  </Target>

  <ItemGroup>
    <Content Include="$(IntermediateDotNetReleaserStructuredLoggerFile)">
      <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
      <Link>$(DotNetReleaserStructuredLoggerFile)</Link>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Visible>false</Visible>
    </Content>
  </ItemGroup>
</Project>
